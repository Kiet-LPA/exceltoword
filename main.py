import streamlit as st
import pandas as pd
from docx import Document
from docx.shared import Inches
from PIL import Image
from io import BytesIO
import os
import re
import requests
from openpyxl import load_workbook
from docx.shared import Pt
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from docx.shared import Cm
from docx.enum.table import WD_ALIGN_VERTICAL
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml.shared import OxmlElement

st.set_page_config(page_title="T·∫°o file Word t·ª´ Excel", page_icon="üìù")

st.title("T·∫°o file Word t·ª´ Excel (s·ª≠ d·ª•ng c·ªôt Design Card + STT D√†n Trang)")
sheet_file = st.file_uploader("üìÅ T·∫£i l√™n file Excel (.xlsx) c√≥ c·ªôt 'Design Card' v√† 'STT D√†n Trang'", type=["xlsx"])
#export_pdf = st.checkbox("Xu·∫•t ra PDF (.pdf)")

if st.button("T·∫°o file Word"):
    if not sheet_file:
        st.warning("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n file tr∆∞·ªõc.")
    else:
        try:
            excel_bytes = BytesIO(sheet_file.read())
            excel_bytes.seek(0)
            wb = load_workbook(excel_bytes, data_only=True)
            ws = wb.active
            df = pd.read_excel(excel_bytes)

            if 'Design Card' not in df.columns or 'STT D√†n Trang' not in df.columns:
                st.error("‚ùå Thi·∫øu c·ªôt 'Design Card' ho·∫∑c 'STT D√†n Trang' trong file Excel.")
            else:
                doc = Document()
                image_map = {}

                col_design = df.columns.get_loc("Design Card") + 1
                col_stt = df.columns.get_loc("STT D√†n Trang") + 1

                for i in range(len(df)):
                    row_excel = i + 2  # Excel index starts at 2
                    cell_link = ws.cell(row=row_excel, column=col_design)
                    raw_stt_cell = ws.cell(row=row_excel, column=col_stt)

                    # L·∫•y link ·∫£nh
                    if cell_link.hyperlink:
                        image_url = cell_link.hyperlink.target
                    else:
                        image_url = str(cell_link.value).strip() if cell_link.value else None

                    if not image_url:
                        continue

                    # Th√™m https n·∫øu thi·∫øu
                    if not image_url.startswith("http"):
                        image_url = "https://" + image_url

                    # L·∫•y STT
                    stt_raw = str(raw_stt_cell.value).strip() if raw_stt_cell.value else f"Row_{row_excel}"
                    stts = re.split(r"[,\s]+", stt_raw)

                    try:
                        match = re.search(r"drive\.google\.com/file/d/([a-zA-Z0-9_-]+)", image_url)
                        if match:
                            file_id = match.group(1)
                            image_url = f"https://drive.google.com/uc?export=download&id={file_id}"

                        response = requests.get(image_url, timeout=30)
                        response.raise_for_status()
                        img = Image.open(BytesIO(response.content))
                        img.thumbnail((500, 9999))

                        for stt in stts:
                            safe_stt = re.sub(r'[^\w\-_.]', '_', stt)
                            temp_path = f"temp_{safe_stt}.png"
                            img.save(temp_path)
                            image_map[stt] = {
                                "path": temp_path,
                                "valid": True
                            }
                            st.success(f"‚úÖ ·∫¢nh STT {stt} x·ª≠ l√Ω th√†nh c√¥ng")

                    except Exception as e:
                        # Ghi log n·ªôi b·ªô n·∫øu c·∫ßn, nh∆∞ng kh√¥ng in ra giao di·ªán
                        print(f"L·ªói khi t·∫£i {image_url}: {e}")  # ho·∫∑c ghi file log

                        for stt in stts:
                            image_map[stt] = {
                                "path": None,
                                "valid": False
                            }
                            st.warning(f"‚ö†Ô∏è L·ªói ·∫£nh STT {stt}: Link kh√¥ng ch·ª©a ·∫£nh")



                if not image_map:
                    st.warning("‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng, kh√¥ng th·ªÉ t·∫°o file.")
                    st.stop()

                # === D√†n ·∫£nh v√†o Word (6 h√¨nh/trang: 3 h√†ng x 2 c·ªôt)
                def sort_key(stt):
                    try:
                        return int(stt)
                    except:
                        return float('inf')

                # Ch·ªâ l·∫•y nh·ªØng ·∫£nh h·ª£p l·ªá ƒë·ªÉ d√†n trang
                sorted_stts = sorted(
                    [stt for stt in image_map if image_map[stt]["valid"]],
                    key=sort_key
                )
                rows_per_page = 3
                cols_per_page = 2
                max_per_page = rows_per_page * cols_per_page
                image_width = Cm(7.83)
                col_img_width = image_width + Cm(0.1)  # ho·∫∑c 0.2 n·∫øu v·∫´n b·ªã khu·∫•t

                # X√≥a header v√† footer n·∫øu c√≥
                for section in doc.sections:
                    section.header.is_linked_to_previous = False
                    section.footer.is_linked_to_previous = False
                    section.header.paragraphs[0].clear()
                    section.footer.paragraphs[0].clear()
                    section.header_distance = Cm(0.1)
                    section.footer_distance = Cm(0.1)
                    section.top_margin = Cm(0.5)
                    section.bottom_margin = Cm(0.5)
                    section.left_margin = Cm(0.5)
                    section.right_margin = Cm(0.5)

                for i in range(0, len(sorted_stts), max_per_page):
                    page_stts = sorted_stts[i:i+max_per_page]
                    table = doc.add_table(rows=rows_per_page, cols=cols_per_page)
                    # Set padding trong b·∫£ng v·ªÅ 0 ƒë·ªÉ ·∫£nh s√°t nhau
                    tbl = table._tbl
                    tblPr = tbl.tblPr
                    tblCellMar = OxmlElement('w:tblCellMar')
                    for margin in ['top', 'left', 'bottom', 'right']:
                        node = OxmlElement(f'w:{margin}')
                        node.set(qn('w:w'), '0')
                        node.set(qn('w:type'), 'dxa')
                        tblCellMar.append(node)
                    tblPr.append(tblCellMar)
                    table.autofit = False

                    for idx, stt in enumerate(page_stts):
                        if not image_map[stt]["valid"]:
                            continue  # Kh√¥ng ch√®n ·∫£nh b·ªã l·ªói v√†o Word
                        row = idx // cols_per_page
                        col = idx % cols_per_page
                        cell = table.cell(row, col)

                        # X√≥a n·ªôi dung c≈©
                        for para in cell.paragraphs:
                            para.clear()

                        # Canh tr√°i ·∫£nh b√™n tr√°i, ph·∫£i ·∫£nh b√™n ph·∫£i
                        alignment = 0 if col == 0 else 2

                        # T·∫°o b·∫£ng con: 1 h√†ng, 2 c·ªôt (STT | ·∫¢nh)
                        inner_table = cell.add_table(rows=1, cols=2)
                        inner_table.autofit = False
                        inner_table.allow_autofit = False

                        # C·∫•u h√¨nh width ch√≠nh x√°c
                        inner_table.autofit = False
                        inner_table.allow_autofit = False
                        inner_table.columns[0].width = Cm(0.5)
                        inner_table.columns[1].width = Cm(17.3)  # 7.83 + 0.3 d∆∞

                        # T·ªïng width c·ªßa b·∫£ng con
                        total_inner_table_width = Cm(9.33)
                        tbl_pr = inner_table._tbl.tblPr

                        tbl_w = OxmlElement('w:tblW')
                        tbl_w.set(qn('w:w'), str(int(total_inner_table_width.cm * 567)))  # 1cm = 567 twips
                        tbl_w.set(qn('w:type'), 'dxa')
                        tbl_pr.append(tbl_w)

                        # D·ªãch b·∫£ng con sang ph·∫£i ch√∫t (n·∫øu c·∫ßn)
                        tbl_indent = OxmlElement('w:tblInd')
                        tbl_indent.set(qn('w:w'), '150')  # 150 twips = 0.3cm
                        tbl_indent.set(qn('w:type'), 'dxa')
                        tbl_pr.append(tbl_indent)

                        # C·ªôt STT (tr√°i)
                        stt_cell = inner_table.cell(0, 0)
                        stt_cell.width = Cm(1.2)
                        stt_cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER

                        stt_para = stt_cell.paragraphs[0]
                        stt_para.paragraph_format.space_after = Pt(0)
                        stt_para.paragraph_format.space_before = Pt(0)
                        stt_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                        stt_run = stt_para.add_run(str(stt))
                        stt_run.bold = True
                        stt_run.font.size = Pt(15)


                        # C·ªôt ·∫£nh (ph·∫£i)
                        img_cell = inner_table.cell(0, 1)
                        img_cell.width = image_width
                        img_cell.vertical_alignment = WD_ALIGN_VERTICAL.CENTER

                        img_para = img_cell.paragraphs[0]
                        img_para.paragraph_format.space_after = Pt(0)
                        img_para.paragraph_format.space_before = Pt(0)
                        img_para.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                        img_run = img_para.add_run()
                        if image_map[stt]["valid"]:
                            img_run.add_picture(image_map[stt]["path"], width=image_width)
                        else:
                            img_run = img_para.add_run("Link kh√¥ng ch·ª©a ·∫£nh")
                            img_run.font.size = Pt(11)
                            img_run.bold = True
                            img_run.italic = True

                    # Ng·∫Øt trang th·ªß c√¥ng sau m·ªói b·∫£ng (tr·ª´ trang cu·ªëi)
                    if i + max_per_page < len(sorted_stts):
                        doc.add_page_break()


                # === Xu·∫•t file
                base_name = os.path.splitext(sheet_file.name)[0]
                docx_path = f"{base_name}_output.docx"
                doc.save(docx_path)
                st.success("‚úÖ ƒê√£ t·∫°o file Word!")

                with open(docx_path, "rb") as f:
                    st.download_button("üì• T·∫£i file Word", f, file_name=docx_path)

                # if export_pdf:
                #     from docx2pdf import convert
                #     pdf_path = f"{base_name}_output.pdf"
                #     convert(docx_path, pdf_path)
                #     with open(pdf_path, "rb") as f:
                #         st.download_button("üì• T·∫£i file PDF", f, file_name=pdf_path)

                # Cleanup
                for item in image_map.values():
                    if item["valid"] and os.path.exists(item["path"]):
                        os.remove(item["path"])


        except Exception as e:
            st.error(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")